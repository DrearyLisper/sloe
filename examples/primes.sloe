id x = x

true x y = x
false x y = y
or p q = p p q
and p q = p q p
not p = p false true

if cond a b = cond a b

false1 x = false
iszero n = n false1 true

succ n f x = f (n f x)

pred1 f g h = h (g f)
pred2 x u = x
pred3 u = u

pred n f x = n (pred1 f) (pred2 x) pred3

sub m n = n pred m

eq? m n = and (iszero (sub m n)) (iszero (sub n m))
lt? m n = and (iszero (sub m n)) (not (iszero (sub n m)))

add m n f x = m f (n f x)
mul m n = m (add n) 0

pair x y f = f x y
first p = p true
second p = p false
nil = false

null1 h t d = false
null l = l null1 true

head = first
tail = second

select' r n l = if (null l) nil (if (iszero n) (head l) (r r (pred n) (tail l)))
select n l = select' select' n l

div' r a b = if (lt? a b) 0 (add 1 (r r (sub a b) b))
div a b = div' div' a b

range' r i n fun = if (eq? i n) nil (pair (fun i) (r r (add i 1) n fun))
range i n = range' range' i n id
rangef f i n = range' range' i n f

mod' r a b = if (lt? a b) a (r r (sub a b) b)
mod a b = mod' mod' a b

sum' r la = if (null la) 0 (add (head la) (r r (tail la)))
sum l = sum' sum' l

map' r f l = if (null l) nil (pair (f (head l)) (r r f (tail l)))
map f l = map' map' f l

filter' r f l = if (null l) nil (if (f (head l)) (pair (head l) (r r f (tail l))) (r r f (tail l)))
filter f l = filter' filter' f l

length' r l = if (null l) 0 (add 1 (r r (tail l)))
length l = length' length' l

take' r n l = if (null l) nil (if (eq? n 0) nil (pair (head l) (r r (sub n 1) (tail l))))
take n l = take' take' n l

testF a b = not (iszero (mod b a))
primes' r l = if (null l) nil (pair (head l) (r r (filter (testF (head l)) (tail l))))
primes l = primes' primes' l

p = primes (range 2 10)

select 0 p
select 1 p
select 2 p
select 3 p
